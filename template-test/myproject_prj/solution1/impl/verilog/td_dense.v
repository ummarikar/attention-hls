// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module td_dense (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_0_V_read,
        input_1_V_read,
        input_2_V_read,
        input_3_V_read,
        input_4_V_read,
        input_5_V_read,
        input_6_V_read,
        input_7_V_read,
        input_8_V_read,
        input_9_V_read,
        input_10_V_read,
        input_11_V_read,
        input_12_V_read,
        input_13_V_read,
        input_14_V_read,
        input_15_V_read,
        input_16_V_read,
        input_17_V_read,
        input_18_V_read,
        input_19_V_read,
        input_20_V_read,
        input_21_V_read,
        input_22_V_read,
        input_23_V_read,
        input_24_V_read,
        input_25_V_read,
        input_26_V_read,
        input_27_V_read,
        input_28_V_read,
        input_29_V_read,
        input_30_V_read,
        input_31_V_read,
        input_32_V_read,
        input_33_V_read,
        input_34_V_read,
        input_35_V_read,
        input_36_V_read,
        input_37_V_read,
        input_38_V_read,
        input_39_V_read,
        input_40_V_read,
        input_41_V_read,
        input_42_V_read,
        input_43_V_read,
        input_44_V_read,
        input_45_V_read,
        input_46_V_read,
        input_47_V_read,
        input_48_V_read,
        input_49_V_read,
        input_50_V_read,
        input_51_V_read,
        input_52_V_read,
        input_53_V_read,
        input_54_V_read,
        input_55_V_read,
        input_56_V_read,
        input_57_V_read,
        input_58_V_read,
        input_59_V_read,
        input_60_V_read,
        input_61_V_read,
        input_62_V_read,
        input_63_V_read,
        input_64_V_read,
        input_65_V_read,
        input_66_V_read,
        input_67_V_read,
        input_68_V_read,
        input_69_V_read,
        input_70_V_read,
        input_71_V_read,
        input_72_V_read,
        input_73_V_read,
        input_74_V_read,
        input_75_V_read,
        input_76_V_read,
        input_77_V_read,
        input_78_V_read,
        input_79_V_read,
        input_80_V_read,
        input_81_V_read,
        input_82_V_read,
        input_83_V_read,
        input_84_V_read,
        input_85_V_read,
        input_86_V_read,
        input_87_V_read,
        input_88_V_read,
        input_89_V_read,
        input_90_V_read,
        input_91_V_read,
        input_92_V_read,
        input_93_V_read,
        input_94_V_read,
        input_95_V_read,
        input_96_V_read,
        input_97_V_read,
        input_98_V_read,
        input_99_V_read,
        input_100_V_read,
        input_101_V_read,
        input_102_V_read,
        input_103_V_read,
        input_104_V_read,
        input_105_V_read,
        input_106_V_read,
        input_107_V_read,
        input_108_V_read,
        input_109_V_read,
        input_110_V_read,
        input_111_V_read,
        input_112_V_read,
        input_113_V_read,
        input_114_V_read,
        input_115_V_read,
        input_116_V_read,
        input_117_V_read,
        input_118_V_read,
        input_119_V_read,
        input_120_V_read,
        input_121_V_read,
        input_122_V_read,
        input_123_V_read,
        input_124_V_read,
        input_125_V_read,
        input_126_V_read,
        input_127_V_read,
        res_0_V,
        res_0_V_ap_vld,
        res_1_V,
        res_1_V_ap_vld,
        res_2_V,
        res_2_V_ap_vld,
        res_3_V,
        res_3_V_ap_vld,
        res_4_V,
        res_4_V_ap_vld,
        res_5_V,
        res_5_V_ap_vld,
        res_6_V,
        res_6_V_ap_vld,
        res_7_V,
        res_7_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] input_0_V_read;
input  [15:0] input_1_V_read;
input  [15:0] input_2_V_read;
input  [15:0] input_3_V_read;
input  [15:0] input_4_V_read;
input  [15:0] input_5_V_read;
input  [15:0] input_6_V_read;
input  [15:0] input_7_V_read;
input  [15:0] input_8_V_read;
input  [15:0] input_9_V_read;
input  [15:0] input_10_V_read;
input  [15:0] input_11_V_read;
input  [15:0] input_12_V_read;
input  [15:0] input_13_V_read;
input  [15:0] input_14_V_read;
input  [15:0] input_15_V_read;
input  [15:0] input_16_V_read;
input  [15:0] input_17_V_read;
input  [15:0] input_18_V_read;
input  [15:0] input_19_V_read;
input  [15:0] input_20_V_read;
input  [15:0] input_21_V_read;
input  [15:0] input_22_V_read;
input  [15:0] input_23_V_read;
input  [15:0] input_24_V_read;
input  [15:0] input_25_V_read;
input  [15:0] input_26_V_read;
input  [15:0] input_27_V_read;
input  [15:0] input_28_V_read;
input  [15:0] input_29_V_read;
input  [15:0] input_30_V_read;
input  [15:0] input_31_V_read;
input  [15:0] input_32_V_read;
input  [15:0] input_33_V_read;
input  [15:0] input_34_V_read;
input  [15:0] input_35_V_read;
input  [15:0] input_36_V_read;
input  [15:0] input_37_V_read;
input  [15:0] input_38_V_read;
input  [15:0] input_39_V_read;
input  [15:0] input_40_V_read;
input  [15:0] input_41_V_read;
input  [15:0] input_42_V_read;
input  [15:0] input_43_V_read;
input  [15:0] input_44_V_read;
input  [15:0] input_45_V_read;
input  [15:0] input_46_V_read;
input  [15:0] input_47_V_read;
input  [15:0] input_48_V_read;
input  [15:0] input_49_V_read;
input  [15:0] input_50_V_read;
input  [15:0] input_51_V_read;
input  [15:0] input_52_V_read;
input  [15:0] input_53_V_read;
input  [15:0] input_54_V_read;
input  [15:0] input_55_V_read;
input  [15:0] input_56_V_read;
input  [15:0] input_57_V_read;
input  [15:0] input_58_V_read;
input  [15:0] input_59_V_read;
input  [15:0] input_60_V_read;
input  [15:0] input_61_V_read;
input  [15:0] input_62_V_read;
input  [15:0] input_63_V_read;
input  [15:0] input_64_V_read;
input  [15:0] input_65_V_read;
input  [15:0] input_66_V_read;
input  [15:0] input_67_V_read;
input  [15:0] input_68_V_read;
input  [15:0] input_69_V_read;
input  [15:0] input_70_V_read;
input  [15:0] input_71_V_read;
input  [15:0] input_72_V_read;
input  [15:0] input_73_V_read;
input  [15:0] input_74_V_read;
input  [15:0] input_75_V_read;
input  [15:0] input_76_V_read;
input  [15:0] input_77_V_read;
input  [15:0] input_78_V_read;
input  [15:0] input_79_V_read;
input  [15:0] input_80_V_read;
input  [15:0] input_81_V_read;
input  [15:0] input_82_V_read;
input  [15:0] input_83_V_read;
input  [15:0] input_84_V_read;
input  [15:0] input_85_V_read;
input  [15:0] input_86_V_read;
input  [15:0] input_87_V_read;
input  [15:0] input_88_V_read;
input  [15:0] input_89_V_read;
input  [15:0] input_90_V_read;
input  [15:0] input_91_V_read;
input  [15:0] input_92_V_read;
input  [15:0] input_93_V_read;
input  [15:0] input_94_V_read;
input  [15:0] input_95_V_read;
input  [15:0] input_96_V_read;
input  [15:0] input_97_V_read;
input  [15:0] input_98_V_read;
input  [15:0] input_99_V_read;
input  [15:0] input_100_V_read;
input  [15:0] input_101_V_read;
input  [15:0] input_102_V_read;
input  [15:0] input_103_V_read;
input  [15:0] input_104_V_read;
input  [15:0] input_105_V_read;
input  [15:0] input_106_V_read;
input  [15:0] input_107_V_read;
input  [15:0] input_108_V_read;
input  [15:0] input_109_V_read;
input  [15:0] input_110_V_read;
input  [15:0] input_111_V_read;
input  [15:0] input_112_V_read;
input  [15:0] input_113_V_read;
input  [15:0] input_114_V_read;
input  [15:0] input_115_V_read;
input  [15:0] input_116_V_read;
input  [15:0] input_117_V_read;
input  [15:0] input_118_V_read;
input  [15:0] input_119_V_read;
input  [15:0] input_120_V_read;
input  [15:0] input_121_V_read;
input  [15:0] input_122_V_read;
input  [15:0] input_123_V_read;
input  [15:0] input_124_V_read;
input  [15:0] input_125_V_read;
input  [15:0] input_126_V_read;
input  [15:0] input_127_V_read;
output  [15:0] res_0_V;
output   res_0_V_ap_vld;
output  [15:0] res_1_V;
output   res_1_V_ap_vld;
output  [15:0] res_2_V;
output   res_2_V_ap_vld;
output  [15:0] res_3_V;
output   res_3_V_ap_vld;
output  [15:0] res_4_V;
output   res_4_V_ap_vld;
output  [15:0] res_5_V;
output   res_5_V_ap_vld;
output  [15:0] res_6_V;
output   res_6_V_ap_vld;
output  [15:0] res_7_V;
output   res_7_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg res_0_V_ap_vld;
reg res_1_V_ap_vld;
reg res_2_V_ap_vld;
reg res_3_V_ap_vld;
reg res_4_V_ap_vld;
reg res_5_V_ap_vld;
reg res_6_V_ap_vld;
reg res_7_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire   [3:0] ii_fu_1238_p2;
reg   [3:0] ii_reg_2098;
wire    ap_CS_fsm_state2;
wire   [6:0] shl_ln_fu_1248_p3;
reg   [6:0] shl_ln_reg_2103;
wire   [0:0] icmp_ln35_fu_1232_p2;
wire   [4:0] jj_fu_1262_p2;
wire    ap_CS_fsm_state3;
wire   [15:0] grp_dense_simple_0_0_2_fu_1219_ap_return;
reg   [15:0] dense_acc_0_V_reg_2116;
wire    ap_CS_fsm_state18;
wire   [3:0] ii_1_fu_1428_p2;
reg   [3:0] ii_1_reg_2124;
wire    ap_CS_fsm_state22;
wire   [0:0] icmp_ln58_fu_1422_p2;
wire   [2:0] trunc_ln203_fu_1439_p1;
reg   [2:0] trunc_ln203_reg_2134;
reg   [2:0] acc_V_address0;
reg    acc_V_ce0;
reg    acc_V_we0;
wire   [10:0] acc_V_q0;
reg   [3:0] dense_input_V_address0;
reg    dense_input_V_ce0;
reg    dense_input_V_we0;
wire   [15:0] dense_input_V_q0;
reg    dense_input_V_ce1;
wire   [15:0] dense_input_V_q1;
wire    grp_dense_simple_0_0_2_fu_1219_ap_start;
wire    grp_dense_simple_0_0_2_fu_1219_ap_done;
wire    grp_dense_simple_0_0_2_fu_1219_ap_idle;
wire    grp_dense_simple_0_0_2_fu_1219_ap_ready;
wire   [3:0] grp_dense_simple_0_0_2_fu_1219_data_V_address0;
wire    grp_dense_simple_0_0_2_fu_1219_data_V_ce0;
wire   [3:0] grp_dense_simple_0_0_2_fu_1219_data_V_address1;
wire    grp_dense_simple_0_0_2_fu_1219_data_V_ce1;
wire    grp_tanh_fu_1224_ap_start;
wire    grp_tanh_fu_1224_ap_done;
wire    grp_tanh_fu_1224_ap_idle;
wire    grp_tanh_fu_1224_ap_ready;
wire   [10:0] grp_tanh_fu_1224_ap_return;
reg   [3:0] index_reg_1185;
wire    ap_CS_fsm_state21;
reg   [4:0] jj_0_reg_1197;
wire   [0:0] icmp_ln39_fu_1256_p2;
reg   [3:0] ii6_0_reg_1208;
wire    ap_CS_fsm_state24;
reg    grp_dense_simple_0_0_2_fu_1219_ap_start_reg;
wire    ap_CS_fsm_state8;
reg   [23:0] ap_NS_fsm;
wire    ap_NS_fsm_state9;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
reg    grp_tanh_fu_1224_ap_start_reg;
wire    ap_NS_fsm_state19;
wire    ap_CS_fsm_state19;
wire   [63:0] zext_ln42_fu_1272_p1;
wire   [63:0] zext_ln54_fu_1417_p1;
wire   [63:0] zext_ln59_fu_1434_p1;
wire  signed [15:0] sext_ln59_fu_1443_p1;
wire    ap_CS_fsm_state23;
wire   [15:0] tmp_fu_1282_p130;
wire   [2:0] trunc_ln40_fu_1244_p1;
wire   [6:0] zext_ln40_fu_1268_p1;
wire   [6:0] tmp_fu_1282_p129;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 24'd1;
#0 grp_dense_simple_0_0_2_fu_1219_ap_start_reg = 1'b0;
#0 grp_tanh_fu_1224_ap_start_reg = 1'b0;
end

td_dense_acc_V #(
    .DataWidth( 11 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
acc_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(acc_V_address0),
    .ce0(acc_V_ce0),
    .we0(acc_V_we0),
    .d0(grp_tanh_fu_1224_ap_return),
    .q0(acc_V_q0)
);

td_dense_dense_inlbW #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
dense_input_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_input_V_address0),
    .ce0(dense_input_V_ce0),
    .we0(dense_input_V_we0),
    .d0(tmp_fu_1282_p130),
    .q0(dense_input_V_q0),
    .address1(grp_dense_simple_0_0_2_fu_1219_data_V_address1),
    .ce1(dense_input_V_ce1),
    .q1(dense_input_V_q1)
);

dense_simple_0_0_2 grp_dense_simple_0_0_2_fu_1219(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dense_simple_0_0_2_fu_1219_ap_start),
    .ap_done(grp_dense_simple_0_0_2_fu_1219_ap_done),
    .ap_idle(grp_dense_simple_0_0_2_fu_1219_ap_idle),
    .ap_ready(grp_dense_simple_0_0_2_fu_1219_ap_ready),
    .data_V_address0(grp_dense_simple_0_0_2_fu_1219_data_V_address0),
    .data_V_ce0(grp_dense_simple_0_0_2_fu_1219_data_V_ce0),
    .data_V_q0(dense_input_V_q0),
    .data_V_address1(grp_dense_simple_0_0_2_fu_1219_data_V_address1),
    .data_V_ce1(grp_dense_simple_0_0_2_fu_1219_data_V_ce1),
    .data_V_q1(dense_input_V_q1),
    .ap_return(grp_dense_simple_0_0_2_fu_1219_ap_return)
);

tanh grp_tanh_fu_1224(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_tanh_fu_1224_ap_start),
    .ap_done(grp_tanh_fu_1224_ap_done),
    .ap_idle(grp_tanh_fu_1224_ap_idle),
    .ap_ready(grp_tanh_fu_1224_ap_ready),
    .data_V_read(dense_acc_0_V_reg_2116),
    .ap_return(grp_tanh_fu_1224_ap_return)
);

myproject_mux_128jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 16 ),
    .din33_WIDTH( 16 ),
    .din34_WIDTH( 16 ),
    .din35_WIDTH( 16 ),
    .din36_WIDTH( 16 ),
    .din37_WIDTH( 16 ),
    .din38_WIDTH( 16 ),
    .din39_WIDTH( 16 ),
    .din40_WIDTH( 16 ),
    .din41_WIDTH( 16 ),
    .din42_WIDTH( 16 ),
    .din43_WIDTH( 16 ),
    .din44_WIDTH( 16 ),
    .din45_WIDTH( 16 ),
    .din46_WIDTH( 16 ),
    .din47_WIDTH( 16 ),
    .din48_WIDTH( 16 ),
    .din49_WIDTH( 16 ),
    .din50_WIDTH( 16 ),
    .din51_WIDTH( 16 ),
    .din52_WIDTH( 16 ),
    .din53_WIDTH( 16 ),
    .din54_WIDTH( 16 ),
    .din55_WIDTH( 16 ),
    .din56_WIDTH( 16 ),
    .din57_WIDTH( 16 ),
    .din58_WIDTH( 16 ),
    .din59_WIDTH( 16 ),
    .din60_WIDTH( 16 ),
    .din61_WIDTH( 16 ),
    .din62_WIDTH( 16 ),
    .din63_WIDTH( 16 ),
    .din64_WIDTH( 16 ),
    .din65_WIDTH( 16 ),
    .din66_WIDTH( 16 ),
    .din67_WIDTH( 16 ),
    .din68_WIDTH( 16 ),
    .din69_WIDTH( 16 ),
    .din70_WIDTH( 16 ),
    .din71_WIDTH( 16 ),
    .din72_WIDTH( 16 ),
    .din73_WIDTH( 16 ),
    .din74_WIDTH( 16 ),
    .din75_WIDTH( 16 ),
    .din76_WIDTH( 16 ),
    .din77_WIDTH( 16 ),
    .din78_WIDTH( 16 ),
    .din79_WIDTH( 16 ),
    .din80_WIDTH( 16 ),
    .din81_WIDTH( 16 ),
    .din82_WIDTH( 16 ),
    .din83_WIDTH( 16 ),
    .din84_WIDTH( 16 ),
    .din85_WIDTH( 16 ),
    .din86_WIDTH( 16 ),
    .din87_WIDTH( 16 ),
    .din88_WIDTH( 16 ),
    .din89_WIDTH( 16 ),
    .din90_WIDTH( 16 ),
    .din91_WIDTH( 16 ),
    .din92_WIDTH( 16 ),
    .din93_WIDTH( 16 ),
    .din94_WIDTH( 16 ),
    .din95_WIDTH( 16 ),
    .din96_WIDTH( 16 ),
    .din97_WIDTH( 16 ),
    .din98_WIDTH( 16 ),
    .din99_WIDTH( 16 ),
    .din100_WIDTH( 16 ),
    .din101_WIDTH( 16 ),
    .din102_WIDTH( 16 ),
    .din103_WIDTH( 16 ),
    .din104_WIDTH( 16 ),
    .din105_WIDTH( 16 ),
    .din106_WIDTH( 16 ),
    .din107_WIDTH( 16 ),
    .din108_WIDTH( 16 ),
    .din109_WIDTH( 16 ),
    .din110_WIDTH( 16 ),
    .din111_WIDTH( 16 ),
    .din112_WIDTH( 16 ),
    .din113_WIDTH( 16 ),
    .din114_WIDTH( 16 ),
    .din115_WIDTH( 16 ),
    .din116_WIDTH( 16 ),
    .din117_WIDTH( 16 ),
    .din118_WIDTH( 16 ),
    .din119_WIDTH( 16 ),
    .din120_WIDTH( 16 ),
    .din121_WIDTH( 16 ),
    .din122_WIDTH( 16 ),
    .din123_WIDTH( 16 ),
    .din124_WIDTH( 16 ),
    .din125_WIDTH( 16 ),
    .din126_WIDTH( 16 ),
    .din127_WIDTH( 16 ),
    .din128_WIDTH( 7 ),
    .dout_WIDTH( 16 ))
myproject_mux_128jbC_U1738(
    .din0(input_0_V_read),
    .din1(input_1_V_read),
    .din2(input_2_V_read),
    .din3(input_3_V_read),
    .din4(input_4_V_read),
    .din5(input_5_V_read),
    .din6(input_6_V_read),
    .din7(input_7_V_read),
    .din8(input_8_V_read),
    .din9(input_9_V_read),
    .din10(input_10_V_read),
    .din11(input_11_V_read),
    .din12(input_12_V_read),
    .din13(input_13_V_read),
    .din14(input_14_V_read),
    .din15(input_15_V_read),
    .din16(input_16_V_read),
    .din17(input_17_V_read),
    .din18(input_18_V_read),
    .din19(input_19_V_read),
    .din20(input_20_V_read),
    .din21(input_21_V_read),
    .din22(input_22_V_read),
    .din23(input_23_V_read),
    .din24(input_24_V_read),
    .din25(input_25_V_read),
    .din26(input_26_V_read),
    .din27(input_27_V_read),
    .din28(input_28_V_read),
    .din29(input_29_V_read),
    .din30(input_30_V_read),
    .din31(input_31_V_read),
    .din32(input_32_V_read),
    .din33(input_33_V_read),
    .din34(input_34_V_read),
    .din35(input_35_V_read),
    .din36(input_36_V_read),
    .din37(input_37_V_read),
    .din38(input_38_V_read),
    .din39(input_39_V_read),
    .din40(input_40_V_read),
    .din41(input_41_V_read),
    .din42(input_42_V_read),
    .din43(input_43_V_read),
    .din44(input_44_V_read),
    .din45(input_45_V_read),
    .din46(input_46_V_read),
    .din47(input_47_V_read),
    .din48(input_48_V_read),
    .din49(input_49_V_read),
    .din50(input_50_V_read),
    .din51(input_51_V_read),
    .din52(input_52_V_read),
    .din53(input_53_V_read),
    .din54(input_54_V_read),
    .din55(input_55_V_read),
    .din56(input_56_V_read),
    .din57(input_57_V_read),
    .din58(input_58_V_read),
    .din59(input_59_V_read),
    .din60(input_60_V_read),
    .din61(input_61_V_read),
    .din62(input_62_V_read),
    .din63(input_63_V_read),
    .din64(input_64_V_read),
    .din65(input_65_V_read),
    .din66(input_66_V_read),
    .din67(input_67_V_read),
    .din68(input_68_V_read),
    .din69(input_69_V_read),
    .din70(input_70_V_read),
    .din71(input_71_V_read),
    .din72(input_72_V_read),
    .din73(input_73_V_read),
    .din74(input_74_V_read),
    .din75(input_75_V_read),
    .din76(input_76_V_read),
    .din77(input_77_V_read),
    .din78(input_78_V_read),
    .din79(input_79_V_read),
    .din80(input_80_V_read),
    .din81(input_81_V_read),
    .din82(input_82_V_read),
    .din83(input_83_V_read),
    .din84(input_84_V_read),
    .din85(input_85_V_read),
    .din86(input_86_V_read),
    .din87(input_87_V_read),
    .din88(input_88_V_read),
    .din89(input_89_V_read),
    .din90(input_90_V_read),
    .din91(input_91_V_read),
    .din92(input_92_V_read),
    .din93(input_93_V_read),
    .din94(input_94_V_read),
    .din95(input_95_V_read),
    .din96(input_96_V_read),
    .din97(input_97_V_read),
    .din98(input_98_V_read),
    .din99(input_99_V_read),
    .din100(input_100_V_read),
    .din101(input_101_V_read),
    .din102(input_102_V_read),
    .din103(input_103_V_read),
    .din104(input_104_V_read),
    .din105(input_105_V_read),
    .din106(input_106_V_read),
    .din107(input_107_V_read),
    .din108(input_108_V_read),
    .din109(input_109_V_read),
    .din110(input_110_V_read),
    .din111(input_111_V_read),
    .din112(input_112_V_read),
    .din113(input_113_V_read),
    .din114(input_114_V_read),
    .din115(input_115_V_read),
    .din116(input_116_V_read),
    .din117(input_117_V_read),
    .din118(input_118_V_read),
    .din119(input_119_V_read),
    .din120(input_120_V_read),
    .din121(input_121_V_read),
    .din122(input_122_V_read),
    .din123(input_123_V_read),
    .din124(input_124_V_read),
    .din125(input_125_V_read),
    .din126(input_126_V_read),
    .din127(input_127_V_read),
    .din128(tmp_fu_1282_p129),
    .dout(tmp_fu_1282_p130)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln58_fu_1422_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dense_simple_0_0_2_fu_1219_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state9) & (1'b1 == ap_CS_fsm_state8))) begin
            grp_dense_simple_0_0_2_fu_1219_ap_start_reg <= 1'b1;
        end else if ((grp_dense_simple_0_0_2_fu_1219_ap_ready == 1'b1)) begin
            grp_dense_simple_0_0_2_fu_1219_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_tanh_fu_1224_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state19) & (1'b1 == ap_CS_fsm_state18))) begin
            grp_tanh_fu_1224_ap_start_reg <= 1'b1;
        end else if ((grp_tanh_fu_1224_ap_ready == 1'b1)) begin
            grp_tanh_fu_1224_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_1232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ii6_0_reg_1208 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        ii6_0_reg_1208 <= ii_1_reg_2124;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        index_reg_1185 <= ii_reg_2098;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        index_reg_1185 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_1232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        jj_0_reg_1197 <= 5'd0;
    end else if (((icmp_ln39_fu_1256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        jj_0_reg_1197 <= jj_fu_1262_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        dense_acc_0_V_reg_2116 <= grp_dense_simple_0_0_2_fu_1219_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        ii_1_reg_2124 <= ii_1_fu_1428_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ii_reg_2098 <= ii_fu_1238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_1232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln_reg_2103[6 : 4] <= shl_ln_fu_1248_p3[6 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_1422_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        trunc_ln203_reg_2134 <= trunc_ln203_fu_1439_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        acc_V_address0 = zext_ln59_fu_1434_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        acc_V_address0 = zext_ln54_fu_1417_p1;
    end else begin
        acc_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22))) begin
        acc_V_ce0 = 1'b1;
    end else begin
        acc_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        acc_V_we0 = 1'b1;
    end else begin
        acc_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln58_fu_1422_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln58_fu_1422_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dense_input_V_address0 = zext_ln42_fu_1272_p1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        dense_input_V_address0 = grp_dense_simple_0_0_2_fu_1219_data_V_address0;
    end else begin
        dense_input_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dense_input_V_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        dense_input_V_ce0 = grp_dense_simple_0_0_2_fu_1219_data_V_ce0;
    end else begin
        dense_input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        dense_input_V_ce1 = grp_dense_simple_0_0_2_fu_1219_data_V_ce1;
    end else begin
        dense_input_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln39_fu_1256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        dense_input_V_we0 = 1'b1;
    end else begin
        dense_input_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_2134 == 3'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        res_0_V_ap_vld = 1'b1;
    end else begin
        res_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_2134 == 3'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        res_1_V_ap_vld = 1'b1;
    end else begin
        res_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_2134 == 3'd2) & (1'b1 == ap_CS_fsm_state23))) begin
        res_2_V_ap_vld = 1'b1;
    end else begin
        res_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_2134 == 3'd3) & (1'b1 == ap_CS_fsm_state23))) begin
        res_3_V_ap_vld = 1'b1;
    end else begin
        res_3_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_2134 == 3'd4) & (1'b1 == ap_CS_fsm_state23))) begin
        res_4_V_ap_vld = 1'b1;
    end else begin
        res_4_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_2134 == 3'd5) & (1'b1 == ap_CS_fsm_state23))) begin
        res_5_V_ap_vld = 1'b1;
    end else begin
        res_5_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_2134 == 3'd6) & (1'b1 == ap_CS_fsm_state23))) begin
        res_6_V_ap_vld = 1'b1;
    end else begin
        res_6_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_2134 == 3'd7) & (1'b1 == ap_CS_fsm_state23))) begin
        res_7_V_ap_vld = 1'b1;
    end else begin
        res_7_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln35_fu_1232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln39_fu_1256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state22 : begin
            if (((icmp_ln58_fu_1422_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_NS_fsm_state19 = ap_NS_fsm[32'd18];

assign ap_NS_fsm_state9 = ap_NS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign grp_dense_simple_0_0_2_fu_1219_ap_start = grp_dense_simple_0_0_2_fu_1219_ap_start_reg;

assign grp_tanh_fu_1224_ap_start = grp_tanh_fu_1224_ap_start_reg;

assign icmp_ln35_fu_1232_p2 = ((index_reg_1185 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_1256_p2 = ((jj_0_reg_1197 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_1422_p2 = ((ii6_0_reg_1208 == 4'd8) ? 1'b1 : 1'b0);

assign ii_1_fu_1428_p2 = (ii6_0_reg_1208 + 4'd1);

assign ii_fu_1238_p2 = (index_reg_1185 + 4'd1);

assign jj_fu_1262_p2 = (jj_0_reg_1197 + 5'd1);

assign res_0_V = sext_ln59_fu_1443_p1;

assign res_1_V = sext_ln59_fu_1443_p1;

assign res_2_V = sext_ln59_fu_1443_p1;

assign res_3_V = sext_ln59_fu_1443_p1;

assign res_4_V = sext_ln59_fu_1443_p1;

assign res_5_V = sext_ln59_fu_1443_p1;

assign res_6_V = sext_ln59_fu_1443_p1;

assign res_7_V = sext_ln59_fu_1443_p1;

assign sext_ln59_fu_1443_p1 = $signed(acc_V_q0);

assign shl_ln_fu_1248_p3 = {{trunc_ln40_fu_1244_p1}, {4'd0}};

assign tmp_fu_1282_p129 = (shl_ln_reg_2103 + zext_ln40_fu_1268_p1);

assign trunc_ln203_fu_1439_p1 = ii6_0_reg_1208[2:0];

assign trunc_ln40_fu_1244_p1 = index_reg_1185[2:0];

assign zext_ln40_fu_1268_p1 = jj_0_reg_1197;

assign zext_ln42_fu_1272_p1 = jj_0_reg_1197;

assign zext_ln54_fu_1417_p1 = index_reg_1185;

assign zext_ln59_fu_1434_p1 = ii6_0_reg_1208;

always @ (posedge ap_clk) begin
    shl_ln_reg_2103[3:0] <= 4'b0000;
end

endmodule //td_dense

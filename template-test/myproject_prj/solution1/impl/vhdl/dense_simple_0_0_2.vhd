-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_simple_0_0_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_V_ce0 : OUT STD_LOGIC;
    data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_V_ce1 : OUT STD_LOGIC;
    data_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dense_simple_0_0_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv26_3FFF8C1 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111100011000001";
    constant ap_const_lv26_1290 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001001010010000";
    constant ap_const_lv26_73F : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011100111111";
    constant ap_const_lv26_3FFFC69 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111110001101001";
    constant ap_const_lv26_A5E : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000101001011110";
    constant ap_const_lv25_1FFFF74 : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111101110100";
    constant ap_const_lv26_4AF : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010010101111";
    constant ap_const_lv26_3FFF662 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111011001100010";
    constant ap_const_lv26_2CE : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001011001110";
    constant ap_const_lv26_3AE : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001110101110";
    constant ap_const_lv26_3FFFCC1 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111110011000001";
    constant ap_const_lv25_AB : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010101011";
    constant ap_const_lv25_C8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000011001000";
    constant ap_const_lv26_3FFFB84 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111101110000100";
    constant ap_const_lv26_32A : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001100101010";
    constant ap_const_lv26_3FFFE19 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111000011001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv16_FF60 : STD_LOGIC_VECTOR (15 downto 0) := "1111111101100000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln_reg_1406 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal trunc_ln708_s_reg_1411 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln708_2_reg_1426 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal trunc_ln708_16_reg_1431 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln708_17_reg_1446 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal trunc_ln708_5_reg_1451 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_6_reg_1466 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal trunc_ln708_7_reg_1471 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_74_fu_1200_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_74_reg_1486 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_8_reg_1491 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal trunc_ln708_9_reg_1496 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_64_fu_1244_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_64_reg_1511 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_10_reg_1516 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal trunc_ln708_11_reg_1521 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_12_reg_1536 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_13_reg_1541 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_67_fu_1318_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_67_reg_1556 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_14_reg_1561 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_15_reg_1566 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_69_fu_1354_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_69_reg_1571 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal mul_ln1118_30_fu_251_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_31_fu_252_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_38_fu_253_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_28_fu_254_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_fu_255_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_27_fu_256_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_35_fu_257_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_33_fu_258_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_32_fu_259_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_37_fu_260_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_36_fu_261_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_24_fu_262_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_26_fu_263_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_29_fu_264_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_25_fu_265_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_34_fu_266_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_fu_255_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_24_fu_262_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1118_25_fu_265_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_26_fu_263_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1118_27_fu_256_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1118_28_fu_254_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_29_fu_264_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_30_fu_251_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln708_2_fu_1161_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_73_fu_1194_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_1_fu_1158_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_31_fu_252_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_32_fu_259_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln703_63_fu_1240_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_fu_1236_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_33_fu_258_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_34_fu_266_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_35_fu_257_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_36_fu_261_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln703_66_fu_1314_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_65_fu_1310_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_37_fu_260_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_38_fu_253_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln703_70_fu_1365_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_fu_1358_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_72_fu_1374_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_75_fu_1379_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_71_fu_1369_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_76_fu_1384_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_68_fu_1361_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then
                add_ln703_64_reg_1511 <= add_ln703_64_fu_1244_p2;
                trunc_ln708_8_reg_1491 <= mul_ln1118_31_fu_252_p2(25 downto 10);
                trunc_ln708_9_reg_1496 <= mul_ln1118_32_fu_259_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                add_ln703_67_reg_1556 <= add_ln703_67_fu_1318_p2;
                trunc_ln708_12_reg_1536 <= mul_ln1118_35_fu_257_p2(25 downto 10);
                trunc_ln708_13_reg_1541 <= mul_ln1118_36_fu_261_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln703_69_reg_1571 <= add_ln703_69_fu_1354_p2;
                trunc_ln708_14_reg_1561 <= mul_ln1118_37_fu_260_p2(25 downto 10);
                trunc_ln708_15_reg_1566 <= mul_ln1118_38_fu_253_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln703_74_reg_1486 <= add_ln703_74_fu_1200_p2;
                trunc_ln708_6_reg_1466 <= mul_ln1118_29_fu_264_p2(25 downto 10);
                trunc_ln708_7_reg_1471 <= mul_ln1118_30_fu_251_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001))) then
                trunc_ln708_10_reg_1516 <= mul_ln1118_33_fu_258_p2(25 downto 10);
                trunc_ln708_11_reg_1521 <= mul_ln1118_34_fu_266_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                trunc_ln708_16_reg_1431 <= mul_ln1118_26_fu_263_p2(24 downto 10);
                trunc_ln708_2_reg_1426 <= mul_ln1118_25_fu_265_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                trunc_ln708_17_reg_1446 <= mul_ln1118_27_fu_256_p2(24 downto 10);
                trunc_ln708_5_reg_1451 <= mul_ln1118_28_fu_254_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                trunc_ln708_s_reg_1411 <= mul_ln1118_24_fu_262_p2(24 downto 10);
                trunc_ln_reg_1406 <= mul_ln1118_fu_255_p2(25 downto 10);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_reset_idle_pp0, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln703_63_fu_1240_p2 <= std_logic_vector(unsigned(trunc_ln708_5_reg_1451) + unsigned(trunc_ln708_6_reg_1466));
    add_ln703_64_fu_1244_p2 <= std_logic_vector(unsigned(add_ln703_63_fu_1240_p2) + unsigned(add_ln703_fu_1236_p2));
    add_ln703_65_fu_1310_p2 <= std_logic_vector(unsigned(trunc_ln708_7_reg_1471) + unsigned(trunc_ln708_8_reg_1491));
    add_ln703_66_fu_1314_p2 <= std_logic_vector(unsigned(trunc_ln708_9_reg_1496) + unsigned(trunc_ln708_10_reg_1516));
    add_ln703_67_fu_1318_p2 <= std_logic_vector(unsigned(add_ln703_66_fu_1314_p2) + unsigned(add_ln703_65_fu_1310_p2));
    add_ln703_68_fu_1361_p2 <= std_logic_vector(unsigned(add_ln703_67_reg_1556) + unsigned(add_ln703_64_reg_1511));
    add_ln703_69_fu_1354_p2 <= std_logic_vector(unsigned(trunc_ln708_11_reg_1521) + unsigned(trunc_ln708_12_reg_1536));
    add_ln703_70_fu_1365_p2 <= std_logic_vector(unsigned(trunc_ln708_13_reg_1541) + unsigned(trunc_ln708_14_reg_1561));
    add_ln703_71_fu_1369_p2 <= std_logic_vector(unsigned(add_ln703_70_fu_1365_p2) + unsigned(add_ln703_69_reg_1571));
    add_ln703_72_fu_1374_p2 <= std_logic_vector(unsigned(trunc_ln708_15_reg_1566) + unsigned(sext_ln708_fu_1358_p1));
    add_ln703_73_fu_1194_p2 <= std_logic_vector(signed(sext_ln708_2_fu_1161_p1) + signed(ap_const_lv16_FF60));
    add_ln703_74_fu_1200_p2 <= std_logic_vector(unsigned(add_ln703_73_fu_1194_p2) + unsigned(sext_ln708_1_fu_1158_p1));
    add_ln703_75_fu_1379_p2 <= std_logic_vector(unsigned(add_ln703_74_reg_1486) + unsigned(add_ln703_72_fu_1374_p2));
    add_ln703_76_fu_1384_p2 <= std_logic_vector(unsigned(add_ln703_75_fu_1379_p2) + unsigned(add_ln703_71_fu_1369_p2));
    add_ln703_fu_1236_p2 <= std_logic_vector(unsigned(trunc_ln_reg_1406) + unsigned(trunc_ln708_2_reg_1426));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(add_ln703_76_fu_1384_p2) + unsigned(add_ln703_68_fu_1361_p2));

    data_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                data_V_address0 <= ap_const_lv64_E(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                data_V_address0 <= ap_const_lv64_C(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                data_V_address0 <= ap_const_lv64_A(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                data_V_address0 <= ap_const_lv64_8(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                data_V_address0 <= ap_const_lv64_6(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                data_V_address0 <= ap_const_lv64_4(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                data_V_address0 <= ap_const_lv64_2(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                data_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
            else 
                data_V_address0 <= "XXXX";
            end if;
        else 
            data_V_address0 <= "XXXX";
        end if; 
    end process;


    data_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                data_V_address1 <= ap_const_lv64_F(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                data_V_address1 <= ap_const_lv64_D(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                data_V_address1 <= ap_const_lv64_B(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                data_V_address1 <= ap_const_lv64_9(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                data_V_address1 <= ap_const_lv64_7(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                data_V_address1 <= ap_const_lv64_5(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                data_V_address1 <= ap_const_lv64_3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                data_V_address1 <= ap_const_lv64_1(4 - 1 downto 0);
            else 
                data_V_address1 <= "XXXX";
            end if;
        else 
            data_V_address1 <= "XXXX";
        end if; 
    end process;


    data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            data_V_ce1 <= ap_const_logic_1;
        else 
            data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1118_24_fu_262_p0 <= data_V_q1;
    mul_ln1118_24_fu_262_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_24_fu_262_p0) * signed('0' &ap_const_lv25_AB))), 25));
    mul_ln1118_25_fu_265_p0 <= data_V_q0;
    mul_ln1118_25_fu_265_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_25_fu_265_p0) * signed('0' &ap_const_lv26_32A))), 26));
    mul_ln1118_26_fu_263_p0 <= data_V_q1;
    mul_ln1118_26_fu_263_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_26_fu_263_p0) * signed('0' &ap_const_lv25_C8))), 25));
    mul_ln1118_27_fu_256_p0 <= data_V_q0;
    mul_ln1118_27_fu_256_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_27_fu_256_p0) * signed(ap_const_lv25_1FFFF74))), 25));
    mul_ln1118_28_fu_254_p0 <= data_V_q1;
    mul_ln1118_28_fu_254_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_28_fu_254_p0) * signed(ap_const_lv26_3FFFC69))), 26));
    mul_ln1118_29_fu_264_p0 <= data_V_q0;
    mul_ln1118_29_fu_264_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_29_fu_264_p0) * signed(ap_const_lv26_3FFFB84))), 26));
    mul_ln1118_30_fu_251_p0 <= data_V_q1;
    mul_ln1118_30_fu_251_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_30_fu_251_p0) * signed(ap_const_lv26_3FFF8C1))), 26));
    mul_ln1118_31_fu_252_p0 <= data_V_q0;
    mul_ln1118_31_fu_252_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_31_fu_252_p0) * signed('0' &ap_const_lv26_1290))), 26));
    mul_ln1118_32_fu_259_p0 <= data_V_q1;
    mul_ln1118_32_fu_259_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_32_fu_259_p0) * signed('0' &ap_const_lv26_2CE))), 26));
    mul_ln1118_33_fu_258_p0 <= data_V_q0;
    mul_ln1118_33_fu_258_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_33_fu_258_p0) * signed(ap_const_lv26_3FFF662))), 26));
    mul_ln1118_34_fu_266_p0 <= data_V_q1;
    mul_ln1118_34_fu_266_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_34_fu_266_p0) * signed(ap_const_lv26_3FFFE19))), 26));
    mul_ln1118_35_fu_257_p0 <= data_V_q0;
    mul_ln1118_35_fu_257_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_35_fu_257_p0) * signed('0' &ap_const_lv26_4AF))), 26));
    mul_ln1118_36_fu_261_p0 <= data_V_q1;
    mul_ln1118_36_fu_261_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_36_fu_261_p0) * signed(ap_const_lv26_3FFFCC1))), 26));
    mul_ln1118_37_fu_260_p0 <= data_V_q0;
    mul_ln1118_37_fu_260_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_37_fu_260_p0) * signed('0' &ap_const_lv26_3AE))), 26));
    mul_ln1118_38_fu_253_p0 <= data_V_q1;
    mul_ln1118_38_fu_253_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_38_fu_253_p0) * signed('0' &ap_const_lv26_73F))), 26));
    mul_ln1118_fu_255_p0 <= data_V_q0;
    mul_ln1118_fu_255_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_fu_255_p0) * signed('0' &ap_const_lv26_A5E))), 26));
        sext_ln708_1_fu_1158_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_16_reg_1431),16));

        sext_ln708_2_fu_1161_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_17_reg_1446),16));

        sext_ln708_fu_1358_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_s_reg_1411),16));

end behav;

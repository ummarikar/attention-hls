-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity td_dense is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_5_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_6_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_7_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_8_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_9_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_10_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_11_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_12_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_13_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_14_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_15_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_16_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_17_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_18_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_19_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_20_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_21_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_22_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_23_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_24_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_25_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_26_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_27_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_28_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_29_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_30_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_31_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_32_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_33_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_34_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_35_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_36_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_37_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_38_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_39_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_40_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_41_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_42_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_43_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_44_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_45_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_46_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_47_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_48_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_49_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_50_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_51_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_52_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_53_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_54_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_55_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_56_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_57_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_58_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_59_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_60_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_61_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_62_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_63_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_64_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_65_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_66_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_67_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_68_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_69_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_70_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_71_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_72_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_73_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_74_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_75_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_76_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_77_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_78_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_79_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_80_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_81_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_82_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_83_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_84_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_85_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_86_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_87_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_88_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_89_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_90_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_91_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_92_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_93_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_94_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_95_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_96_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_97_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_98_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_99_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_100_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_101_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_102_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_103_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_104_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_105_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_106_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_107_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_108_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_109_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_110_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_111_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_112_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_113_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_114_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_115_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_116_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_117_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_118_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_119_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_120_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_121_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_122_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_123_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_124_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_125_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_126_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    input_127_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    res_0_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_0_V_ap_vld : OUT STD_LOGIC;
    res_1_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_1_V_ap_vld : OUT STD_LOGIC;
    res_2_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_2_V_ap_vld : OUT STD_LOGIC;
    res_3_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_3_V_ap_vld : OUT STD_LOGIC;
    res_4_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_4_V_ap_vld : OUT STD_LOGIC;
    res_5_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_5_V_ap_vld : OUT STD_LOGIC;
    res_6_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_6_V_ap_vld : OUT STD_LOGIC;
    res_7_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_7_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of td_dense is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ii_fu_1238_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ii_reg_2098 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln_fu_1248_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_reg_2103 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln35_fu_1232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal jj_fu_1262_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_dense_simple_0_0_2_fu_1219_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal dense_acc_0_V_reg_2116 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ii_1_fu_1428_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ii_1_reg_2124 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal icmp_ln58_fu_1422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln203_fu_1439_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln203_reg_2134 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_V_ce0 : STD_LOGIC;
    signal acc_V_we0 : STD_LOGIC;
    signal acc_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal dense_input_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_input_V_ce0 : STD_LOGIC;
    signal dense_input_V_we0 : STD_LOGIC;
    signal dense_input_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dense_input_V_ce1 : STD_LOGIC;
    signal dense_input_V_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_simple_0_0_2_fu_1219_ap_start : STD_LOGIC;
    signal grp_dense_simple_0_0_2_fu_1219_ap_done : STD_LOGIC;
    signal grp_dense_simple_0_0_2_fu_1219_ap_idle : STD_LOGIC;
    signal grp_dense_simple_0_0_2_fu_1219_ap_ready : STD_LOGIC;
    signal grp_dense_simple_0_0_2_fu_1219_data_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dense_simple_0_0_2_fu_1219_data_V_ce0 : STD_LOGIC;
    signal grp_dense_simple_0_0_2_fu_1219_data_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dense_simple_0_0_2_fu_1219_data_V_ce1 : STD_LOGIC;
    signal grp_tanh_fu_1224_ap_start : STD_LOGIC;
    signal grp_tanh_fu_1224_ap_done : STD_LOGIC;
    signal grp_tanh_fu_1224_ap_idle : STD_LOGIC;
    signal grp_tanh_fu_1224_ap_ready : STD_LOGIC;
    signal grp_tanh_fu_1224_ap_return : STD_LOGIC_VECTOR (10 downto 0);
    signal index_reg_1185 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal jj_0_reg_1197 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln39_fu_1256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ii6_0_reg_1208 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_dense_simple_0_0_2_fu_1219_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm_state9 : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_tanh_fu_1224_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm_state19 : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal zext_ln42_fu_1272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_fu_1417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_fu_1434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln59_fu_1443_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_fu_1282_p130 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln40_fu_1244_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln40_fu_1268_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1282_p129 : STD_LOGIC_VECTOR (6 downto 0);

    component dense_simple_0_0_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        data_V_ce0 : OUT STD_LOGIC;
        data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        data_V_ce1 : OUT STD_LOGIC;
        data_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component tanh IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component myproject_mux_128jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        din65_WIDTH : INTEGER;
        din66_WIDTH : INTEGER;
        din67_WIDTH : INTEGER;
        din68_WIDTH : INTEGER;
        din69_WIDTH : INTEGER;
        din70_WIDTH : INTEGER;
        din71_WIDTH : INTEGER;
        din72_WIDTH : INTEGER;
        din73_WIDTH : INTEGER;
        din74_WIDTH : INTEGER;
        din75_WIDTH : INTEGER;
        din76_WIDTH : INTEGER;
        din77_WIDTH : INTEGER;
        din78_WIDTH : INTEGER;
        din79_WIDTH : INTEGER;
        din80_WIDTH : INTEGER;
        din81_WIDTH : INTEGER;
        din82_WIDTH : INTEGER;
        din83_WIDTH : INTEGER;
        din84_WIDTH : INTEGER;
        din85_WIDTH : INTEGER;
        din86_WIDTH : INTEGER;
        din87_WIDTH : INTEGER;
        din88_WIDTH : INTEGER;
        din89_WIDTH : INTEGER;
        din90_WIDTH : INTEGER;
        din91_WIDTH : INTEGER;
        din92_WIDTH : INTEGER;
        din93_WIDTH : INTEGER;
        din94_WIDTH : INTEGER;
        din95_WIDTH : INTEGER;
        din96_WIDTH : INTEGER;
        din97_WIDTH : INTEGER;
        din98_WIDTH : INTEGER;
        din99_WIDTH : INTEGER;
        din100_WIDTH : INTEGER;
        din101_WIDTH : INTEGER;
        din102_WIDTH : INTEGER;
        din103_WIDTH : INTEGER;
        din104_WIDTH : INTEGER;
        din105_WIDTH : INTEGER;
        din106_WIDTH : INTEGER;
        din107_WIDTH : INTEGER;
        din108_WIDTH : INTEGER;
        din109_WIDTH : INTEGER;
        din110_WIDTH : INTEGER;
        din111_WIDTH : INTEGER;
        din112_WIDTH : INTEGER;
        din113_WIDTH : INTEGER;
        din114_WIDTH : INTEGER;
        din115_WIDTH : INTEGER;
        din116_WIDTH : INTEGER;
        din117_WIDTH : INTEGER;
        din118_WIDTH : INTEGER;
        din119_WIDTH : INTEGER;
        din120_WIDTH : INTEGER;
        din121_WIDTH : INTEGER;
        din122_WIDTH : INTEGER;
        din123_WIDTH : INTEGER;
        din124_WIDTH : INTEGER;
        din125_WIDTH : INTEGER;
        din126_WIDTH : INTEGER;
        din127_WIDTH : INTEGER;
        din128_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (15 downto 0);
        din43 : IN STD_LOGIC_VECTOR (15 downto 0);
        din44 : IN STD_LOGIC_VECTOR (15 downto 0);
        din45 : IN STD_LOGIC_VECTOR (15 downto 0);
        din46 : IN STD_LOGIC_VECTOR (15 downto 0);
        din47 : IN STD_LOGIC_VECTOR (15 downto 0);
        din48 : IN STD_LOGIC_VECTOR (15 downto 0);
        din49 : IN STD_LOGIC_VECTOR (15 downto 0);
        din50 : IN STD_LOGIC_VECTOR (15 downto 0);
        din51 : IN STD_LOGIC_VECTOR (15 downto 0);
        din52 : IN STD_LOGIC_VECTOR (15 downto 0);
        din53 : IN STD_LOGIC_VECTOR (15 downto 0);
        din54 : IN STD_LOGIC_VECTOR (15 downto 0);
        din55 : IN STD_LOGIC_VECTOR (15 downto 0);
        din56 : IN STD_LOGIC_VECTOR (15 downto 0);
        din57 : IN STD_LOGIC_VECTOR (15 downto 0);
        din58 : IN STD_LOGIC_VECTOR (15 downto 0);
        din59 : IN STD_LOGIC_VECTOR (15 downto 0);
        din60 : IN STD_LOGIC_VECTOR (15 downto 0);
        din61 : IN STD_LOGIC_VECTOR (15 downto 0);
        din62 : IN STD_LOGIC_VECTOR (15 downto 0);
        din63 : IN STD_LOGIC_VECTOR (15 downto 0);
        din64 : IN STD_LOGIC_VECTOR (15 downto 0);
        din65 : IN STD_LOGIC_VECTOR (15 downto 0);
        din66 : IN STD_LOGIC_VECTOR (15 downto 0);
        din67 : IN STD_LOGIC_VECTOR (15 downto 0);
        din68 : IN STD_LOGIC_VECTOR (15 downto 0);
        din69 : IN STD_LOGIC_VECTOR (15 downto 0);
        din70 : IN STD_LOGIC_VECTOR (15 downto 0);
        din71 : IN STD_LOGIC_VECTOR (15 downto 0);
        din72 : IN STD_LOGIC_VECTOR (15 downto 0);
        din73 : IN STD_LOGIC_VECTOR (15 downto 0);
        din74 : IN STD_LOGIC_VECTOR (15 downto 0);
        din75 : IN STD_LOGIC_VECTOR (15 downto 0);
        din76 : IN STD_LOGIC_VECTOR (15 downto 0);
        din77 : IN STD_LOGIC_VECTOR (15 downto 0);
        din78 : IN STD_LOGIC_VECTOR (15 downto 0);
        din79 : IN STD_LOGIC_VECTOR (15 downto 0);
        din80 : IN STD_LOGIC_VECTOR (15 downto 0);
        din81 : IN STD_LOGIC_VECTOR (15 downto 0);
        din82 : IN STD_LOGIC_VECTOR (15 downto 0);
        din83 : IN STD_LOGIC_VECTOR (15 downto 0);
        din84 : IN STD_LOGIC_VECTOR (15 downto 0);
        din85 : IN STD_LOGIC_VECTOR (15 downto 0);
        din86 : IN STD_LOGIC_VECTOR (15 downto 0);
        din87 : IN STD_LOGIC_VECTOR (15 downto 0);
        din88 : IN STD_LOGIC_VECTOR (15 downto 0);
        din89 : IN STD_LOGIC_VECTOR (15 downto 0);
        din90 : IN STD_LOGIC_VECTOR (15 downto 0);
        din91 : IN STD_LOGIC_VECTOR (15 downto 0);
        din92 : IN STD_LOGIC_VECTOR (15 downto 0);
        din93 : IN STD_LOGIC_VECTOR (15 downto 0);
        din94 : IN STD_LOGIC_VECTOR (15 downto 0);
        din95 : IN STD_LOGIC_VECTOR (15 downto 0);
        din96 : IN STD_LOGIC_VECTOR (15 downto 0);
        din97 : IN STD_LOGIC_VECTOR (15 downto 0);
        din98 : IN STD_LOGIC_VECTOR (15 downto 0);
        din99 : IN STD_LOGIC_VECTOR (15 downto 0);
        din100 : IN STD_LOGIC_VECTOR (15 downto 0);
        din101 : IN STD_LOGIC_VECTOR (15 downto 0);
        din102 : IN STD_LOGIC_VECTOR (15 downto 0);
        din103 : IN STD_LOGIC_VECTOR (15 downto 0);
        din104 : IN STD_LOGIC_VECTOR (15 downto 0);
        din105 : IN STD_LOGIC_VECTOR (15 downto 0);
        din106 : IN STD_LOGIC_VECTOR (15 downto 0);
        din107 : IN STD_LOGIC_VECTOR (15 downto 0);
        din108 : IN STD_LOGIC_VECTOR (15 downto 0);
        din109 : IN STD_LOGIC_VECTOR (15 downto 0);
        din110 : IN STD_LOGIC_VECTOR (15 downto 0);
        din111 : IN STD_LOGIC_VECTOR (15 downto 0);
        din112 : IN STD_LOGIC_VECTOR (15 downto 0);
        din113 : IN STD_LOGIC_VECTOR (15 downto 0);
        din114 : IN STD_LOGIC_VECTOR (15 downto 0);
        din115 : IN STD_LOGIC_VECTOR (15 downto 0);
        din116 : IN STD_LOGIC_VECTOR (15 downto 0);
        din117 : IN STD_LOGIC_VECTOR (15 downto 0);
        din118 : IN STD_LOGIC_VECTOR (15 downto 0);
        din119 : IN STD_LOGIC_VECTOR (15 downto 0);
        din120 : IN STD_LOGIC_VECTOR (15 downto 0);
        din121 : IN STD_LOGIC_VECTOR (15 downto 0);
        din122 : IN STD_LOGIC_VECTOR (15 downto 0);
        din123 : IN STD_LOGIC_VECTOR (15 downto 0);
        din124 : IN STD_LOGIC_VECTOR (15 downto 0);
        din125 : IN STD_LOGIC_VECTOR (15 downto 0);
        din126 : IN STD_LOGIC_VECTOR (15 downto 0);
        din127 : IN STD_LOGIC_VECTOR (15 downto 0);
        din128 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component td_dense_acc_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (10 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component td_dense_dense_inlbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    acc_V_U : component td_dense_acc_V
    generic map (
        DataWidth => 11,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_V_address0,
        ce0 => acc_V_ce0,
        we0 => acc_V_we0,
        d0 => grp_tanh_fu_1224_ap_return,
        q0 => acc_V_q0);

    dense_input_V_U : component td_dense_dense_inlbW
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_input_V_address0,
        ce0 => dense_input_V_ce0,
        we0 => dense_input_V_we0,
        d0 => tmp_fu_1282_p130,
        q0 => dense_input_V_q0,
        address1 => grp_dense_simple_0_0_2_fu_1219_data_V_address1,
        ce1 => dense_input_V_ce1,
        q1 => dense_input_V_q1);

    grp_dense_simple_0_0_2_fu_1219 : component dense_simple_0_0_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dense_simple_0_0_2_fu_1219_ap_start,
        ap_done => grp_dense_simple_0_0_2_fu_1219_ap_done,
        ap_idle => grp_dense_simple_0_0_2_fu_1219_ap_idle,
        ap_ready => grp_dense_simple_0_0_2_fu_1219_ap_ready,
        data_V_address0 => grp_dense_simple_0_0_2_fu_1219_data_V_address0,
        data_V_ce0 => grp_dense_simple_0_0_2_fu_1219_data_V_ce0,
        data_V_q0 => dense_input_V_q0,
        data_V_address1 => grp_dense_simple_0_0_2_fu_1219_data_V_address1,
        data_V_ce1 => grp_dense_simple_0_0_2_fu_1219_data_V_ce1,
        data_V_q1 => dense_input_V_q1,
        ap_return => grp_dense_simple_0_0_2_fu_1219_ap_return);

    grp_tanh_fu_1224 : component tanh
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_tanh_fu_1224_ap_start,
        ap_done => grp_tanh_fu_1224_ap_done,
        ap_idle => grp_tanh_fu_1224_ap_idle,
        ap_ready => grp_tanh_fu_1224_ap_ready,
        data_V_read => dense_acc_0_V_reg_2116,
        ap_return => grp_tanh_fu_1224_ap_return);

    myproject_mux_128jbC_U1738 : component myproject_mux_128jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 16,
        din44_WIDTH => 16,
        din45_WIDTH => 16,
        din46_WIDTH => 16,
        din47_WIDTH => 16,
        din48_WIDTH => 16,
        din49_WIDTH => 16,
        din50_WIDTH => 16,
        din51_WIDTH => 16,
        din52_WIDTH => 16,
        din53_WIDTH => 16,
        din54_WIDTH => 16,
        din55_WIDTH => 16,
        din56_WIDTH => 16,
        din57_WIDTH => 16,
        din58_WIDTH => 16,
        din59_WIDTH => 16,
        din60_WIDTH => 16,
        din61_WIDTH => 16,
        din62_WIDTH => 16,
        din63_WIDTH => 16,
        din64_WIDTH => 16,
        din65_WIDTH => 16,
        din66_WIDTH => 16,
        din67_WIDTH => 16,
        din68_WIDTH => 16,
        din69_WIDTH => 16,
        din70_WIDTH => 16,
        din71_WIDTH => 16,
        din72_WIDTH => 16,
        din73_WIDTH => 16,
        din74_WIDTH => 16,
        din75_WIDTH => 16,
        din76_WIDTH => 16,
        din77_WIDTH => 16,
        din78_WIDTH => 16,
        din79_WIDTH => 16,
        din80_WIDTH => 16,
        din81_WIDTH => 16,
        din82_WIDTH => 16,
        din83_WIDTH => 16,
        din84_WIDTH => 16,
        din85_WIDTH => 16,
        din86_WIDTH => 16,
        din87_WIDTH => 16,
        din88_WIDTH => 16,
        din89_WIDTH => 16,
        din90_WIDTH => 16,
        din91_WIDTH => 16,
        din92_WIDTH => 16,
        din93_WIDTH => 16,
        din94_WIDTH => 16,
        din95_WIDTH => 16,
        din96_WIDTH => 16,
        din97_WIDTH => 16,
        din98_WIDTH => 16,
        din99_WIDTH => 16,
        din100_WIDTH => 16,
        din101_WIDTH => 16,
        din102_WIDTH => 16,
        din103_WIDTH => 16,
        din104_WIDTH => 16,
        din105_WIDTH => 16,
        din106_WIDTH => 16,
        din107_WIDTH => 16,
        din108_WIDTH => 16,
        din109_WIDTH => 16,
        din110_WIDTH => 16,
        din111_WIDTH => 16,
        din112_WIDTH => 16,
        din113_WIDTH => 16,
        din114_WIDTH => 16,
        din115_WIDTH => 16,
        din116_WIDTH => 16,
        din117_WIDTH => 16,
        din118_WIDTH => 16,
        din119_WIDTH => 16,
        din120_WIDTH => 16,
        din121_WIDTH => 16,
        din122_WIDTH => 16,
        din123_WIDTH => 16,
        din124_WIDTH => 16,
        din125_WIDTH => 16,
        din126_WIDTH => 16,
        din127_WIDTH => 16,
        din128_WIDTH => 7,
        dout_WIDTH => 16)
    port map (
        din0 => input_0_V_read,
        din1 => input_1_V_read,
        din2 => input_2_V_read,
        din3 => input_3_V_read,
        din4 => input_4_V_read,
        din5 => input_5_V_read,
        din6 => input_6_V_read,
        din7 => input_7_V_read,
        din8 => input_8_V_read,
        din9 => input_9_V_read,
        din10 => input_10_V_read,
        din11 => input_11_V_read,
        din12 => input_12_V_read,
        din13 => input_13_V_read,
        din14 => input_14_V_read,
        din15 => input_15_V_read,
        din16 => input_16_V_read,
        din17 => input_17_V_read,
        din18 => input_18_V_read,
        din19 => input_19_V_read,
        din20 => input_20_V_read,
        din21 => input_21_V_read,
        din22 => input_22_V_read,
        din23 => input_23_V_read,
        din24 => input_24_V_read,
        din25 => input_25_V_read,
        din26 => input_26_V_read,
        din27 => input_27_V_read,
        din28 => input_28_V_read,
        din29 => input_29_V_read,
        din30 => input_30_V_read,
        din31 => input_31_V_read,
        din32 => input_32_V_read,
        din33 => input_33_V_read,
        din34 => input_34_V_read,
        din35 => input_35_V_read,
        din36 => input_36_V_read,
        din37 => input_37_V_read,
        din38 => input_38_V_read,
        din39 => input_39_V_read,
        din40 => input_40_V_read,
        din41 => input_41_V_read,
        din42 => input_42_V_read,
        din43 => input_43_V_read,
        din44 => input_44_V_read,
        din45 => input_45_V_read,
        din46 => input_46_V_read,
        din47 => input_47_V_read,
        din48 => input_48_V_read,
        din49 => input_49_V_read,
        din50 => input_50_V_read,
        din51 => input_51_V_read,
        din52 => input_52_V_read,
        din53 => input_53_V_read,
        din54 => input_54_V_read,
        din55 => input_55_V_read,
        din56 => input_56_V_read,
        din57 => input_57_V_read,
        din58 => input_58_V_read,
        din59 => input_59_V_read,
        din60 => input_60_V_read,
        din61 => input_61_V_read,
        din62 => input_62_V_read,
        din63 => input_63_V_read,
        din64 => input_64_V_read,
        din65 => input_65_V_read,
        din66 => input_66_V_read,
        din67 => input_67_V_read,
        din68 => input_68_V_read,
        din69 => input_69_V_read,
        din70 => input_70_V_read,
        din71 => input_71_V_read,
        din72 => input_72_V_read,
        din73 => input_73_V_read,
        din74 => input_74_V_read,
        din75 => input_75_V_read,
        din76 => input_76_V_read,
        din77 => input_77_V_read,
        din78 => input_78_V_read,
        din79 => input_79_V_read,
        din80 => input_80_V_read,
        din81 => input_81_V_read,
        din82 => input_82_V_read,
        din83 => input_83_V_read,
        din84 => input_84_V_read,
        din85 => input_85_V_read,
        din86 => input_86_V_read,
        din87 => input_87_V_read,
        din88 => input_88_V_read,
        din89 => input_89_V_read,
        din90 => input_90_V_read,
        din91 => input_91_V_read,
        din92 => input_92_V_read,
        din93 => input_93_V_read,
        din94 => input_94_V_read,
        din95 => input_95_V_read,
        din96 => input_96_V_read,
        din97 => input_97_V_read,
        din98 => input_98_V_read,
        din99 => input_99_V_read,
        din100 => input_100_V_read,
        din101 => input_101_V_read,
        din102 => input_102_V_read,
        din103 => input_103_V_read,
        din104 => input_104_V_read,
        din105 => input_105_V_read,
        din106 => input_106_V_read,
        din107 => input_107_V_read,
        din108 => input_108_V_read,
        din109 => input_109_V_read,
        din110 => input_110_V_read,
        din111 => input_111_V_read,
        din112 => input_112_V_read,
        din113 => input_113_V_read,
        din114 => input_114_V_read,
        din115 => input_115_V_read,
        din116 => input_116_V_read,
        din117 => input_117_V_read,
        din118 => input_118_V_read,
        din119 => input_119_V_read,
        din120 => input_120_V_read,
        din121 => input_121_V_read,
        din122 => input_122_V_read,
        din123 => input_123_V_read,
        din124 => input_124_V_read,
        din125 => input_125_V_read,
        din126 => input_126_V_read,
        din127 => input_127_V_read,
        din128 => tmp_fu_1282_p129,
        dout => tmp_fu_1282_p130);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln58_fu_1422_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dense_simple_0_0_2_fu_1219_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dense_simple_0_0_2_fu_1219_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state9) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    grp_dense_simple_0_0_2_fu_1219_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dense_simple_0_0_2_fu_1219_ap_ready = ap_const_logic_1)) then 
                    grp_dense_simple_0_0_2_fu_1219_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_tanh_fu_1224_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_tanh_fu_1224_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state19) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                    grp_tanh_fu_1224_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_tanh_fu_1224_ap_ready = ap_const_logic_1)) then 
                    grp_tanh_fu_1224_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ii6_0_reg_1208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_1232_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ii6_0_reg_1208 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                ii6_0_reg_1208 <= ii_1_reg_2124;
            end if; 
        end if;
    end process;

    index_reg_1185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                index_reg_1185 <= ii_reg_2098;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                index_reg_1185 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    jj_0_reg_1197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_1232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                jj_0_reg_1197 <= ap_const_lv5_0;
            elsif (((icmp_ln39_fu_1256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                jj_0_reg_1197 <= jj_fu_1262_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                dense_acc_0_V_reg_2116 <= grp_dense_simple_0_0_2_fu_1219_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                ii_1_reg_2124 <= ii_1_fu_1428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ii_reg_2098 <= ii_fu_1238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_1232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_2103(6 downto 4) <= shl_ln_fu_1248_p3(6 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_1422_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                trunc_ln203_reg_2134 <= trunc_ln203_fu_1439_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_2103(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln35_fu_1232_p2, ap_CS_fsm_state3, ap_CS_fsm_state22, icmp_ln58_fu_1422_p2, icmp_ln39_fu_1256_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln35_fu_1232_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln39_fu_1256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln58_fu_1422_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    acc_V_address0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state21, zext_ln54_fu_1417_p1, zext_ln59_fu_1434_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            acc_V_address0 <= zext_ln59_fu_1434_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            acc_V_address0 <= zext_ln54_fu_1417_p1(3 - 1 downto 0);
        else 
            acc_V_address0 <= "XXX";
        end if; 
    end process;


    acc_V_ce0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            acc_V_ce0 <= ap_const_logic_1;
        else 
            acc_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    acc_V_we0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            acc_V_we0 <= ap_const_logic_1;
        else 
            acc_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state19 <= ap_NS_fsm(18);
    ap_NS_fsm_state9 <= ap_NS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state22, icmp_ln58_fu_1422_p2)
    begin
        if (((icmp_ln58_fu_1422_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state22, icmp_ln58_fu_1422_p2)
    begin
        if (((icmp_ln58_fu_1422_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dense_input_V_address0_assign_proc : process(ap_CS_fsm_state3, grp_dense_simple_0_0_2_fu_1219_data_V_address0, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, zext_ln42_fu_1272_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_input_V_address0 <= zext_ln42_fu_1272_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            dense_input_V_address0 <= grp_dense_simple_0_0_2_fu_1219_data_V_address0;
        else 
            dense_input_V_address0 <= "XXXX";
        end if; 
    end process;


    dense_input_V_ce0_assign_proc : process(ap_CS_fsm_state3, grp_dense_simple_0_0_2_fu_1219_data_V_ce0, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_input_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            dense_input_V_ce0 <= grp_dense_simple_0_0_2_fu_1219_data_V_ce0;
        else 
            dense_input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_input_V_ce1_assign_proc : process(grp_dense_simple_0_0_2_fu_1219_data_V_ce1, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            dense_input_V_ce1 <= grp_dense_simple_0_0_2_fu_1219_data_V_ce1;
        else 
            dense_input_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_input_V_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln39_fu_1256_p2)
    begin
        if (((icmp_ln39_fu_1256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dense_input_V_we0 <= ap_const_logic_1;
        else 
            dense_input_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_dense_simple_0_0_2_fu_1219_ap_start <= grp_dense_simple_0_0_2_fu_1219_ap_start_reg;
    grp_tanh_fu_1224_ap_start <= grp_tanh_fu_1224_ap_start_reg;
    icmp_ln35_fu_1232_p2 <= "1" when (index_reg_1185 = ap_const_lv4_8) else "0";
    icmp_ln39_fu_1256_p2 <= "1" when (jj_0_reg_1197 = ap_const_lv5_10) else "0";
    icmp_ln58_fu_1422_p2 <= "1" when (ii6_0_reg_1208 = ap_const_lv4_8) else "0";
    ii_1_fu_1428_p2 <= std_logic_vector(unsigned(ii6_0_reg_1208) + unsigned(ap_const_lv4_1));
    ii_fu_1238_p2 <= std_logic_vector(unsigned(index_reg_1185) + unsigned(ap_const_lv4_1));
    jj_fu_1262_p2 <= std_logic_vector(unsigned(jj_0_reg_1197) + unsigned(ap_const_lv5_1));
    res_0_V <= sext_ln59_fu_1443_p1;

    res_0_V_ap_vld_assign_proc : process(trunc_ln203_reg_2134, ap_CS_fsm_state23)
    begin
        if (((trunc_ln203_reg_2134 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            res_0_V_ap_vld <= ap_const_logic_1;
        else 
            res_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_1_V <= sext_ln59_fu_1443_p1;

    res_1_V_ap_vld_assign_proc : process(trunc_ln203_reg_2134, ap_CS_fsm_state23)
    begin
        if (((trunc_ln203_reg_2134 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            res_1_V_ap_vld <= ap_const_logic_1;
        else 
            res_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_2_V <= sext_ln59_fu_1443_p1;

    res_2_V_ap_vld_assign_proc : process(trunc_ln203_reg_2134, ap_CS_fsm_state23)
    begin
        if (((trunc_ln203_reg_2134 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            res_2_V_ap_vld <= ap_const_logic_1;
        else 
            res_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_3_V <= sext_ln59_fu_1443_p1;

    res_3_V_ap_vld_assign_proc : process(trunc_ln203_reg_2134, ap_CS_fsm_state23)
    begin
        if (((trunc_ln203_reg_2134 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            res_3_V_ap_vld <= ap_const_logic_1;
        else 
            res_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_4_V <= sext_ln59_fu_1443_p1;

    res_4_V_ap_vld_assign_proc : process(trunc_ln203_reg_2134, ap_CS_fsm_state23)
    begin
        if (((trunc_ln203_reg_2134 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            res_4_V_ap_vld <= ap_const_logic_1;
        else 
            res_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_5_V <= sext_ln59_fu_1443_p1;

    res_5_V_ap_vld_assign_proc : process(trunc_ln203_reg_2134, ap_CS_fsm_state23)
    begin
        if (((trunc_ln203_reg_2134 = ap_const_lv3_5) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            res_5_V_ap_vld <= ap_const_logic_1;
        else 
            res_5_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_6_V <= sext_ln59_fu_1443_p1;

    res_6_V_ap_vld_assign_proc : process(trunc_ln203_reg_2134, ap_CS_fsm_state23)
    begin
        if (((trunc_ln203_reg_2134 = ap_const_lv3_6) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            res_6_V_ap_vld <= ap_const_logic_1;
        else 
            res_6_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_7_V <= sext_ln59_fu_1443_p1;

    res_7_V_ap_vld_assign_proc : process(trunc_ln203_reg_2134, ap_CS_fsm_state23)
    begin
        if (((trunc_ln203_reg_2134 = ap_const_lv3_7) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            res_7_V_ap_vld <= ap_const_logic_1;
        else 
            res_7_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln59_fu_1443_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(acc_V_q0),16));

    shl_ln_fu_1248_p3 <= (trunc_ln40_fu_1244_p1 & ap_const_lv4_0);
    tmp_fu_1282_p129 <= std_logic_vector(unsigned(shl_ln_reg_2103) + unsigned(zext_ln40_fu_1268_p1));
    trunc_ln203_fu_1439_p1 <= ii6_0_reg_1208(3 - 1 downto 0);
    trunc_ln40_fu_1244_p1 <= index_reg_1185(3 - 1 downto 0);
    zext_ln40_fu_1268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj_0_reg_1197),7));
    zext_ln42_fu_1272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj_0_reg_1197),64));
    zext_ln54_fu_1417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_reg_1185),64));
    zext_ln59_fu_1434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii6_0_reg_1208),64));
end behav;
